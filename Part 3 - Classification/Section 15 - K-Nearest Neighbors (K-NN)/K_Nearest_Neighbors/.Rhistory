install.packages("mvoutliers")
install.packages("mvoutlier")
installed.packages()
library('Rserve')
install.packages("Rserve")
library('Rserve')
?Rserve
Rserve()
Rserve() --no-save
Rserve(args = --no-save)
Rserve(args = "--no-save")
Rserve(args = "--no-save")
Rserve(args = "--no-save")
?Rserve
??Rserve
install.packages("Rserve")
getwd()
Rserve(args = "--no-save")
Rserve(args = "--no-save")
library("Rserve")
Rserve(args = "--no-save")
?Rserve
flights <- fread("flights14.csv")
install.packages("data.table")
flights <- fread("flights14.csv")
?fread
install.packages(c("car", "digest", "e1071", "fansi", "foreign", "fpc", "kernlab", "lme4", "maptools", "pkgconfig", "pls", "Rcpp", "rlang", "robustbase", "scales", "stringi", "survival", "trimcluster"))
if(!require(data.table)) {
install.packages("data.table", repos="http://cran.rstudio.com/"); suppressPackageStartupMessages(require(data.table))}
flights <- read.csv("flights14.csv")
# Data
if(!require(nycflights13)) {
install.packages("nycflights13", repos="http://cran.rstudio.com/"); suppressPackageStartupMessages(require(nycflights13))}
if(!require(nycflights13)) {
install.packages("nycflights13", repos="http://cran.rstudio.com/"); suppressPackageStartupMessages(require(nycflights13))}
flights <- nycflights13::flights
summary(flights)
head(flights)
flights <- nycflights13::flights
flights <- as.data.table(flights)
flights
jfk_origin_flights <- flights[origin == "JFK" & month == 6]
jfk_origin_flights <- flights[origin == "JFK" & month == 6]
jfk_origin_flights
setwd("~/Desktop/machine_learning_a-z/Part 3 - Classification/Section 14 - Logistic Regression/Logistic_Regression")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Logistic Regression
# Importing the dataset
dataset <- read.csv('Social_Network_Ads.csv')
dataset <- dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased <- factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split <- sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
View(training_set)
View(test_set)
View(training_set)
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
prob_pred
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred
cm = table(test_set[, 3], y_pred)
cm
install.package("ElemStatLearn")
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("~/Desktop/machine_learning_a-z/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)/K_Nearest_Neighbors")
# K-Nearest Neighbors (K-NN)
# Importing the dataset
dataset <- read.csv('Social_Network_Ads.csv')
dataset <- dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased <- factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split <- sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
# Feature Scaling
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
View(dataset)
View(training_set)
View(test_set)
library(class)
y_pred = knn(train = training_set[,1:2],
test = test_set[, 1:2],
cl = training_set[, 3],
k = 5)
y_pred
cm = table(test_set[, 3], y_pred)
cm
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
X1
?seq
seq(1, 10, by = 0.25)
?expand.grid
grid_set = expand.grid(X1, X2)
grid_set
y_pred
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[,1:2],
test = grid_set,
cl = training_set[, 3],
k = 5)
plot(set[, -3],
main = 'K-NN (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[,1:2],
test = grid_set,
cl = training_set[, 3],
k = 5)
plot(set[, -3],
main = 'K-NN (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[,1:2],
test = grid_set,
cl = training_set[, 3],
k = 5)
plot(set[, -3],
main = 'K-NN (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))

install.packages("mvoutliers")
install.packages("mvoutlier")
installed.packages()
library('Rserve')
install.packages("Rserve")
library('Rserve')
?Rserve
Rserve()
Rserve() --no-save
Rserve(args = --no-save)
Rserve(args = "--no-save")
Rserve(args = "--no-save")
Rserve(args = "--no-save")
?Rserve
??Rserve
install.packages("Rserve")
getwd()
Rserve(args = "--no-save")
Rserve(args = "--no-save")
library("Rserve")
Rserve(args = "--no-save")
?Rserve
flights <- fread("flights14.csv")
install.packages("data.table")
flights <- fread("flights14.csv")
?fread
install.packages(c("car", "digest", "e1071", "fansi", "foreign", "fpc", "kernlab", "lme4", "maptools", "pkgconfig", "pls", "Rcpp", "rlang", "robustbase", "scales", "stringi", "survival", "trimcluster"))
if(!require(data.table)) {
install.packages("data.table", repos="http://cran.rstudio.com/"); suppressPackageStartupMessages(require(data.table))}
flights <- read.csv("flights14.csv")
# Data
if(!require(nycflights13)) {
install.packages("nycflights13", repos="http://cran.rstudio.com/"); suppressPackageStartupMessages(require(nycflights13))}
if(!require(nycflights13)) {
install.packages("nycflights13", repos="http://cran.rstudio.com/"); suppressPackageStartupMessages(require(nycflights13))}
flights <- nycflights13::flights
summary(flights)
head(flights)
flights <- nycflights13::flights
flights <- as.data.table(flights)
flights
jfk_origin_flights <- flights[origin == "JFK" & month == 6]
jfk_origin_flights <- flights[origin == "JFK" & month == 6]
jfk_origin_flights
setwd("~/Desktop/machine_learning_a-z/Part 2 - Regression/Section 8 - Decision Tree Regression/Decision_Tree_Regression")
source('~/Desktop/machine_learning_a-z/Part 2 - Regression/Section 8 - Decision Tree Regression/Decision_Tree_Regression/decision_tree_regression.R')
source('~/Desktop/machine_learning_a-z/Part 2 - Regression/Section 9 - Random Forest Regression/Random_Forest_Regression/random_forest_regression.R')
setwd("~/Desktop/machine_learning_a-z/Part 2 - Regression/Section 9 - Random Forest Regression/Random_Forest_Regression")
source('~/Desktop/machine_learning_a-z/Part 2 - Regression/Section 9 - Random Forest Regression/Random_Forest_Regression/random_forest_regression.R')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
source('~/Desktop/machine_learning_a-z/Part 2 - Regression/Section 9 - Random Forest Regression/Random_Forest_Regression/random_forest_regression.R')
dataset <- read.csv('Position_Salaries.csv')
dataset <- dataset[2:3]
View(dataset)
# Fitting Linear Regression to dataset
lin_reg <- lm(formula = Salary ~ ., data = dataset)
summary(lin_reg)
dataset$Level2 <- dataset$Level^2
dataset$Level3 <- dataset$Level^3
dataset$Level4 <- dataset$Level^4
View(dataset)
source('~/Desktop/machine_learning_a-z/Part 2 - Regression/Section 6 - Polynomial Regression/Polynomial_Regression/polynomial_regression.R')
poly_reg <- lm(formula = Salary ~ ., data = dataset)
summary(poly_reg)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = 'red')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
color = 'blue')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression') +
xlab('Level') +
ylab('Salary')
summary(poly_reg)
y_pred <- predict(lin_reg, data.frame(Level = 6.5))
y_pred
y_pred <- predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
y_pred
